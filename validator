
// ****** Cấu hình HTML để sửa dụng được thư viện validation này
// 1. phải có thẻ form để bắt sự kiện trong form
// 2. Thẻ input phải có name để lấy dữ liệu trong form
// 3. Thẻ massge thông báo sẽ tự động được thêm vào khi valid
// => tham khảo bên dưới
{/* 
<form id="formID" method="post">
    <div class="form-group col-md-6 col-sm-12">
        <label>Email</label>
        <input type="email"  placeholder="Your email"  class="icon-left" value="${userData.email}" />
    </div> 
</form>
*/}

// ****** SƯ DỤNG THƯ VIỆN 
//1. bắt sự kiện của form 
//2. Tốt nhất hãy sửa dụng e.preventDefault() để ngăn hành vi mặc định của form
//3. gọi thư viện như vd dưới

// $(document).on('click', '.btn-change-pw', function(e){
//     e.preventDefault()
//     let btn = e.currentTarget
//     Validator({
//         form: '#form_change_pw',
//         formGroupSelector: '.form-group',
//         errorSelector: '.validate_massage',
//         rules: [
//           Validator.isRequired('#input_newPW', 'Please input new password'),
//           Validator.minLength('#input_newPW', 6),
//         ],
//         onSubmit: function (data) {
//           console.log(data);
//           // call API
//         }
//       });
// })

// Đối tượng `Validator`
function Validator(options) {

    // test for all input not allow special charactor

    addGlobalTestSpecialCharactor()
    function addGlobalTestSpecialCharactor() {
        let formElement = document.querySelector(options.form)
        let enableInputs = formElement.querySelectorAll('[name]');
        for (var inputElement of enableInputs) {
            let selector = `${inputElement.tagName.toLowerCase()}[name=${inputElement.getAttribute('name')}]`
            let globalRule = Validator.isExistSpecCharactor(selector)
            options.rules.push(globalRule)
        }
    }

    console.log(options)


    function getParent(element, selector) {
        while (element.parentElement) {
            if (element.parentElement.matches(selector)) {
                return element.parentElement;
            }
            element = element.parentElement;
        }
    }

    function removeMessage(inputElement, formGroupSelector) {
        let parentElement = getParent(inputElement, formGroupSelector)
        let massageElements = parentElement.querySelectorAll('.validate_message')
        massageElements.forEach((element) => {
            element.remove();
        });
    }

    function showMassage(inputElement, errorMessage) {
        //create error element 
        let messageElement = document.createElement('small');
        messageElement.className = "validate_message text-danger"; // Set the class name
        messageElement.innerText = errorMessage; // Add your validation message
        inputElement.insertAdjacentElement("beforebegin", messageElement);
    }
    var selectorRules = {};
    // Lấy element của form cần validate
    var formElement = document.querySelector(options.form);
    // Lặp qua mỗi rule và xử lý (lắng nghe sự kiện blur, input, ...)
    options.rules.forEach(function (rule) {

        // Lưu lại các rules cho mỗi input
        if (Array.isArray(selectorRules[rule.selector])) {
            selectorRules[rule.selector].push(rule.test);
        } else {
            selectorRules[rule.selector] = [rule.test];
        }

        var inputElements = formElement.querySelectorAll(rule.selector);

        Array.from(inputElements).forEach(function (inputElement) {
            // Xử lý trường hợp blur khỏi input
            inputElement.onblur = function () {
                validate(inputElement, rule);
            }

            // Xử lý mỗi khi người dùng nhập vào input
            inputElement.oninput = function () {
                removeMessage(inputElement, options.formGroupSelector)
            }
        });
    });
    // Hàm thực hiện validate
    function validate(inputElement, rule) {
        //var errorElement = getParent(inputElement, options.formGroupSelector).querySelector(options.errorSelector);
        var errorMessage;

        // Lấy ra các rules của selector
        var rules = selectorRules[rule.selector];
        // Lặp qua từng rule & kiểm tra
        // Nếu có lỗi thì dừng việc kiểm
        for (var i = 0; i < rules.length; ++i) {
            switch (inputElement.type) {
                case 'radio':
                case 'checkbox':
                    errorMessage = rules[i](
                        formElement.querySelector(rule.selector + ':checked')
                    );
                    break;
                default:
                    errorMessage = rules[i](inputElement.value);
            }
            if (errorMessage) break;
        }




        if (errorMessage) {
            removeMessage(inputElement, options.formGroupSelector)
            showMassage(inputElement, errorMessage)
        } else {
            removeMessage(inputElement, options.formGroupSelector)
        }

        return !errorMessage;
    }



    if (formElement) {
        // Khi submit form


        var isFormValid = true;

        // Lặp qua từng rules và validate
        options.rules.forEach(function (rule) {
            var inputElement = formElement.querySelector(rule.selector);
            var isValid = validate(inputElement, rule);
            if (!isValid) {
                isFormValid = false;
            }
        });

        if (isFormValid) {
            // Trường hợp submit với javascript
            if (typeof options.onSubmit === 'function') {
                var enableInputs = formElement.querySelectorAll('[name]');
                var formValues = Array.from(enableInputs).reduce(function (values, input) {

                    switch (input.type) {
                        case 'radio':
                            values[input.name] = formElement.querySelector('input[name="' + input.name + '"]:checked').value;
                            break;
                        case 'checkbox':
                            if (!input.matches(':checked')) {
                                values[input.name] = '';
                                return values;
                            }
                            if (!Array.isArray(values[input.name])) {
                                values[input.name] = [];
                            }
                            values[input.name].push(input.value);
                            break;
                        case 'file':
                            values[input.name] = input.files;
                            break;
                        default:
                            values[input.name] = input.value;
                    }
                    return values;
                }, {});
                options.onSubmit(formValues);
            }
            // Trường hợp submit với hành vi mặc định
            else {
                formElement.submit();
            }
        }



    }

}



// Định nghĩa rules
// Nguyên tắc của các rules:
// 1. Khi có lỗi => Trả ra message lỗi
// 2. Khi hợp lệ => Không trả ra cái gì cả (undefined)
Validator.isRequired = function (selector, message) {
    return {
        selector: selector,
        test: function (value) {
            return value ? undefined : message || 'Please input this field!'
        }
    };
}

Validator.isEmail = function (selector, message) {
    return {
        selector: selector,
        test: function (value) {
            var regex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
            return regex.test(value) ? undefined : message || 'Must be email!';
        }
    };
}

Validator.minLength = function (selector, min, message) {
    return {
        selector: selector,
        test: function (value) {
            return value.length >= min ? undefined : message || `At least ${min} charactor`
        }
    };
}

Validator.isConfirmed = function (selector, getConfirmValue, message) {
    return {
        selector: selector,
        test: function (value) {
            return value === getConfirmValue() ? undefined : message || 'Input value not same!';
        }
    }
}

Validator.isNumber = function (selector, message) {
    return {
        selector: selector,
        test: function (value) {
            let regex = /^[-+]?[0-9]*\.?[0-9]+$/
            return regex.test(value) ? undefined : message || 'Must be numbers!';
        }
    }
}

Validator.isExistSpecCharactor = function (selector, message) {
    return {
        selector: selector,
        test: function (value) {
            let nonchar = ['<', '>', '\'', '#']
            let check = nonchar.some(char => value.includes(char))
            return !check == true ? undefined : message || "Not allow <,>,',#"
        }
    }
}

